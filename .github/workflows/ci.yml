name: CI/CD - Build, Test & Push to AR

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: 'read'
  id-token: 'write'

env:
  PROJECT_ID: your-gcp-project-id # REPLACE
  AR_REPO_NAME: my-django-repo    # REPLACE
  AR_REGION: us-central1          # REPLACE
  IMAGE_NAME: libreria-ecommerce  # REPLACE
  # Optional: set this to 'true' to auto-deploy to Cloud Run after push
  DEPLOY_TO_CLOUD_RUN: 'false'
  CLOUD_RUN_SERVICE_NAME: my-django-app
  GS_BUCKET_NAME: my-proyecto-django-assets

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # --- Authenticate to GCP via Workload Identity Federation ---
      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/${{ env.PROJECT_ID }}/locations/global/workloadIdentityPools/github-pool/providers/github' # REPLACE with actual provider id
          service_account: 'github-ci-sa@${{ env.PROJECT_ID }}.iam.gserviceaccount.com' # REPLACE with your CI service account

      - name: Read secrets from Secret Manager (with fallback to GitHub Secrets)
        id: read-secrets
        run: |
          set -euo pipefail
          echo "Attempting to read secrets from Secret Manager..."
          # Try to read via gcloud; if it fails, fall back to GitHub Actions Secrets
          if gcloud --quiet secrets versions access latest --secret="django-secret-key" --project="${{ env.PROJECT_ID }}" >/dev/null 2>&1; then
            SECRET_KEY=$(gcloud secrets versions access latest --secret="django-secret-key" --project="${{ env.PROJECT_ID }}")
            DATABASE_URL=$(gcloud secrets versions access latest --secret="django-database-url" --project="${{ env.PROJECT_ID }}")
            echo "Read secrets from Secret Manager."
          else
            echo "Could not read secrets from Secret Manager â€” falling back to GitHub repository secrets."
            # GitHub repository secrets should be set as a fallback: SECRET_KEY, DATABASE_URL
            # Use the GitHub Actions expression to safely pass secrets into the script via env
            SECRET_KEY="$GITHUB_SECRET_KEY_FALLBACK"
            DATABASE_URL="$GITHUB_DATABASE_URL_FALLBACK"
          fi
          # Export to job environment
          echo "SECRET_KEY=${SECRET_KEY}" >> $GITHUB_ENV
          echo "DATABASE_URL=${DATABASE_URL}" >> $GITHUB_ENV
          # Enforce strict secret check in CI
          echo "RAISE_ON_INSECURE_SECRET=1" >> $GITHUB_ENV
        env:
          CLOUDSDK_CORE_PROJECT: ${{ env.PROJECT_ID }}
          # Provide GitHub repo secrets as environment variables for fallback use inside the script
          GITHUB_SECRET_KEY_FALLBACK: ${{ secrets.SECRET_KEY }}
          GITHUB_DATABASE_URL_FALLBACK: ${{ secrets.DATABASE_URL }}

      # --- Django Tests (within a docker test stage) ---
      - name: Run Django Tests
        run: |
          docker build -t test-image --target django_test_stage .
          docker run --rm test-image sh -c "python manage.py test"
        env:
          SECRET_KEY: fake-secret
          DATABASE_URL: sqlite:///db.sqlite3

      - name: Configure Docker to use Artifact Registry
        run: gcloud auth configure-docker ${{ env.AR_REGION }}-docker.pkg.dev

      - name: Build and Push Docker Image
        id: build-image
        env:
          IMAGE_TAG: latest
          FULL_IMAGE_NAME: ${{ env.AR_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.AR_REPO_NAME }}/${{ env.IMAGE_NAME }}
        run: |
          docker build --platform linux/amd64 -t $FULL_IMAGE_NAME:$IMAGE_TAG .
          docker push $FULL_IMAGE_NAME:$IMAGE_TAG

      - name: Deploy to Cloud Run (optional)
        if: env.DEPLOY_TO_CLOUD_RUN == 'true'
        env:
          FULL_IMAGE_NAME: ${{ env.AR_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.AR_REPO_NAME }}/${{ env.IMAGE_NAME }}
        run: |
          echo "Deploying $FULL_IMAGE_NAME:latest to Cloud Run service ${CLOUD_RUN_SERVICE_NAME} in ${AR_REGION}..."
          gcloud run deploy ${CLOUD_RUN_SERVICE_NAME} \
            --image ${FULL_IMAGE_NAME}:latest \
            --platform managed \
            --region ${AR_REGION} \
            --allow-unauthenticated \
            --set-secrets SECRET_KEY=django-secret-key:latest,DATABASE_URL=django-database-url:latest \
            --update-env-vars DJANGO_SETTINGS_MODULE=libreria.libreria.settings,GS_BUCKET_NAME=${GS_BUCKET_NAME}

      - name: Clear secrets from job environment
        if: always()
        run: |
          # Overwrite variables in GITHUB_ENV to avoid accidental reuse in later steps
          echo "SECRET_KEY=" >> $GITHUB_ENV
          echo "DATABASE_URL=" >> $GITHUB_ENV
          echo "RAISE_ON_INSECURE_SECRET=" >> $GITHUB_ENV
